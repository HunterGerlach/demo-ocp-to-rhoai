apiVersion: template.openshift.io/v1
kind: Template
metadata:
  name: demo-v1
  annotations:
    description: "Rust broker (+ UI) + RabbitMQ + Postgres + Python worker (Hugging Face pickled models) on OCP 4.19"
parameters:
  - name: GIT_URI
    description: Git repository URI containing this demo
    required: true
  - name: GIT_REF
    description: Git ref (branch/tag)
    value: main
  - name: POSTGRES_DB
    value: demo
  - name: DB_USER
    value: demo
  - name: DB_PASSWORD
    value: demo
  - name: RABBITMQ_USER
    value: demo
  - name: RABBITMQ_PASSWORD
    value: demo
  - name: MODEL_IRIS_REPO
    value: skops-tests/iris-sklearn-1.0-logistic_regression-without-config
  - name: MODEL_IRIS_FILE
    value: skops-ehiqc2lv.pkl
  - name: MODEL_DIAB_REPO
    value: skops-tests/tabularregression-sklearn-latest-hist_gradient_boosting_regressor-with-config-pickle
  - name: MODEL_DIAB_FILE
    value: skops-xcxb87en.pkl
  - name: MODEL_YOLO_REPO
    value: ultralytics/yolov8n
  # Audio classification is lightweight - no external repo needed
  - name: STORAGE_CLASS_NAME
    value: "crc-csi-hostpath-provisioner"
    description: "Storage class for shared file storage"

objects:
# --- Secrets for DB and MQ ---
- apiVersion: v1
  kind: Secret
  metadata: { name: db-secret }
  stringData:
    DB_USER: "${DB_USER}"
    DB_PASSWORD: "${DB_PASSWORD}"
    POSTGRESQL_USER: "${DB_USER}"
    POSTGRESQL_PASSWORD: "${DB_PASSWORD}"

- apiVersion: v1
  kind: Secret
  metadata: { name: rabbit-secret }
  stringData:
    RABBITMQ_USER: "${RABBITMQ_USER}"
    RABBITMQ_PASSWORD: "${RABBITMQ_PASSWORD}"

# --- Config shared by apps ---
- apiVersion: v1
  kind: ConfigMap
  metadata: { name: app-config }
  data:
    DB_HOST: "postgres"
    DB_PORT: "5432"
    DB_NAME: "${POSTGRES_DB}"
    RABBITMQ_HOST: "rabbitmq"
    RABBITMQ_PORT: "5672"
    AMQP_QUEUE: "inference_requests"
    MODEL_IRIS_REPO: "${MODEL_IRIS_REPO}"
    MODEL_IRIS_FILE: "${MODEL_IRIS_FILE}"
    MODEL_DIAB_REPO: "${MODEL_DIAB_REPO}"
    MODEL_DIAB_FILE: "${MODEL_DIAB_FILE}"
    MODEL_YOLO_REPO: "${MODEL_YOLO_REPO}"

# --- Shared Storage for Files ---
- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata: { name: ml-files-storage }
  spec:
    accessModes: ["ReadWriteMany"]
    resources: { requests: { storage: "10Gi" } }
    storageClassName: ${STORAGE_CLASS_NAME}

# --- Postgres (OpenShift-ready image; ephemeral) ---
- apiVersion: apps/v1
  kind: Deployment
  metadata: { name: postgres }
  spec:
    replicas: 1
    selector: { matchLabels: { app: postgres } }
    template:
      metadata: { labels: { app: postgres } }
      spec:
        containers:
          - name: postgres
            image: registry.redhat.io/rhel9/postgresql-15:latest
            imagePullPolicy: IfNotPresent
            ports: [{ containerPort: 5432, name: pg }]
            env:
              - { name: POSTGRESQL_DATABASE, valueFrom: { configMapKeyRef: { name: app-config, key: DB_NAME } } }
              - { name: POSTGRESQL_USER,     valueFrom: { secretKeyRef: { name: db-secret,  key: POSTGRESQL_USER } } }
              - { name: POSTGRESQL_PASSWORD, valueFrom: { secretKeyRef: { name: db-secret,  key: POSTGRESQL_PASSWORD } } }
            volumeMounts:
              - { name: pgdata, mountPath: /var/lib/pgsql/data }
        volumes:
          - name: pgdata
            emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata: { name: postgres }
  spec:
    selector: { app: postgres }
    ports: [{ name: pg, port: 5432, targetPort: 5432 }]

# --- RabbitMQ (ephemeral; /tmp data) ---
- apiVersion: apps/v1
  kind: Deployment
  metadata: { name: rabbitmq }
  spec:
    replicas: 1
    selector: { matchLabels: { app: rabbitmq } }
    template:
      metadata: { labels: { app: rabbitmq } }
      spec:
        containers:
          - name: rabbitmq
            image: docker.io/library/rabbitmq:4.1-management
            imagePullPolicy: IfNotPresent
            ports:
              - { containerPort: 5672, name: amqp }
              - { containerPort: 15672, name: http }
            env:
              - { name: RABBITMQ_DEFAULT_USER, valueFrom: { secretKeyRef: { name: rabbit-secret, key: RABBITMQ_USER } } }
              - { name: RABBITMQ_DEFAULT_PASS, valueFrom: { secretKeyRef: { name: rabbit-secret, key: RABBITMQ_PASSWORD } } }
              - { name: RABBITMQ_MNESIA_DIR, value: "/tmp/rabbitmq/mnesia" }
              - { name: RABBITMQ_LOGS, value: "-" }
            volumeMounts:
              - { name: tmprmq, mountPath: /tmp/rabbitmq }
        volumes:
          - name: tmprmq
            emptyDir: {}
- apiVersion: v1
  kind: Service
  metadata: { name: rabbitmq }
  spec:
    selector: { app: rabbitmq }
    ports:
      - { name: amqp, port: 5672, targetPort: 5672 }
      - { name: http, port: 15672, targetPort: 15672 }

# --- ImageStreams (lookupPolicy.local so 'broker:latest' resolves) ---
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata: { name: broker }
  spec:
    lookupPolicy: { local: true }
- apiVersion: image.openshift.io/v1
  kind: ImageStream
  metadata: { name: worker }
  spec:
    lookupPolicy: { local: true }

# --- BuildConfigs (Docker strategy) ---
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata: { name: broker }
  spec:
    runPolicy: Serial
    source:
      type: Git
      git: { uri: "${GIT_URI}", ref: "${GIT_REF}" }
      contextDir: "rust-broker"
    strategy:
      type: Docker
      dockerStrategy: {}
    output:
      to: { kind: ImageStreamTag, name: "broker:latest" }
    triggers:
      - type: ConfigChange

- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata: { name: worker }
  spec:
    runPolicy: Serial
    source:
      type: Git
      git: { uri: "${GIT_URI}", ref: "${GIT_REF}" }
      contextDir: "py-worker"
    strategy:
      type: Docker
      dockerStrategy: {}
    output:
      to: { kind: ImageStreamTag, name: "worker:latest" }
    triggers:
      - type: ConfigChange

# --- Broker Deployment + Service + Route (with image trigger annotation) ---
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: broker
    annotations:
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"broker:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"broker\")].image"}]
  spec:
    replicas: 1
    selector: { matchLabels: { app: broker } }
    template:
      metadata: { labels: { app: broker } }
      spec:
        containers:
          - name: broker
            image: broker:latest    # resolved via lookupPolicy.local
            imagePullPolicy: Always
            ports: [{ containerPort: 8080, name: http }]
            envFrom:
              - configMapRef: { name: app-config }
              - secretRef: { name: db-secret }
              - secretRef: { name: rabbit-secret }
            env:
              - { name: PORT, value: "8080" }
              - { name: STARTUP_DELAY_SECS, value: "10" }
            volumeMounts:
              - { name: shared-files, mountPath: /shared-storage }
        volumes:
          - name: shared-files
            persistentVolumeClaim: { claimName: ml-files-storage }
- apiVersion: v1
  kind: Service
  metadata: { name: broker }
  spec:
    selector: { app: broker }
    ports: [{ name: http, port: 8080, targetPort: 8080 }]
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata: { name: broker }
  spec:
    to: { kind: Service, name: broker }
    port: { targetPort: http }
    tls: { termination: edge }

# --- Worker Deployment (with image trigger annotation) ---
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: worker
    annotations:
      image.openshift.io/triggers: >-
        [{"from":{"kind":"ImageStreamTag","name":"worker:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"worker\")].image"}]
  spec:
    replicas: 1
    selector: { matchLabels: { app: worker } }
    template:
      metadata: { labels: { app: worker } }
      spec:
        containers:
          - name: worker
            image: worker:latest     # resolved via lookupPolicy.local
            imagePullPolicy: Always
            envFrom:
              - configMapRef: { name: app-config }
              - secretRef: { name: db-secret }
              - secretRef: { name: rabbit-secret }
            volumeMounts:
              - { name: shared-files, mountPath: /shared-storage }
        volumes:
          - name: shared-files
            persistentVolumeClaim: { claimName: ml-files-storage }
